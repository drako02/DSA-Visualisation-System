{
  "java": "public class BinarySearch {\n    // Binary search method\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0;                  // Initialize left boundary\n        int right = arr.length - 1;    // Initialize right boundary\n\n        while (left <= right) {        // Loop until the boundaries overlap\n            int mid = left + (right - left) / 2;  // Calculate mid index to prevent overflow\n\n            if (arr[mid] == target) {  // Check if mid element is the target\n                return mid;            // If found, return the index\n            } else if (arr[mid] < target) {\n                left = mid + 1;        // Move left boundary to the right of mid\n            } else {\n                right = mid - 1;       // Move right boundary to the left of mid\n            }\n        }\n\n        return -1;  // Target not found, return -1\n    }\n\n    // Main method to test binary search\n    public static void main(String[] args) {\n        int[] arr = {2, 3, 4, 10, 40};\n        int target = 10;\n        int result = binarySearch(arr, target);\n\n        if (result == -1) {\n            System.out.println(\"Element not present in array\");\n        } else {\n            System.out.println(\"Element found at index \" + result);\n        }\n    }\n}\n",
  "cpp": "#include <iostream>\nusing namespace std;\n\n// Binary search function\nint binarySearch(int arr[], int size, int target) {\n    int left = 0;            // Initialize left boundary\n    int right = size - 1;    // Initialize right boundary\n\n    while (left <= right) {  // Loop until the boundaries overlap\n        int mid = left + (right - left) / 2;  // Calculate mid index to prevent overflow\n\n        if (arr[mid] == target) {  // Check if mid element is the target\n            return mid;            // If found, return the index\n        } else if (arr[mid] < target) {\n            left = mid + 1;        // Move left boundary to the right of mid\n        } else {\n            right = mid - 1;       // Move right boundary to the left of mid\n        }\n    }\n\n    return -1;  // Target not found, return -1\n}\n\n// Main function to test binary search\nint main() {\n    int arr[] = {2, 3, 4, 10, 40};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int target = 10;\n    int result = binarySearch(arr, size, target);\n\n    if (result == -1) {\n        cout << \"Element not present in array\" << endl;\n    } else {\n        cout << \"Element found at index \" << result << endl;\n    }\n\n    return 0;\n}\n",
  "javascript": "// Binary search function\nfunction binarySearch(arr, target) {\n    let left = 0;                 // Initialize left boundary\n    let right = arr.length - 1;   // Initialize right boundary\n\n    while (left <= right) {       // Loop until the boundaries overlap\n        let mid = Math.floor((left + right) / 2);  // Calculate mid index\n\n        if (arr[mid] === target) { // Check if mid element is the target\n            return mid;            // If found, return the index\n        } else if (arr[mid] < target) {\n            left = mid + 1;        // Move left boundary to the right of mid\n        } else {\n            right = mid - 1;       // Move right boundary to the left of mid\n        }\n    }\n\n    return -1;  // Target not found, return -1\n}\n\n// Test binary search\nconst arr = [2, 3, 4, 10, 40];\nconst target = 10;\nconst result = binarySearch(arr, target);\n\nif (result === -1) {\n    console.log(\"Element not present in array\");\n} else {\n    console.log(\"Element found at index \" + result);\n}\n"
}
