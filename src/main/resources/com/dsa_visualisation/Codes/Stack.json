{
  "java": "// Stack implementation using an array\npublic class Stack {\n    private int maxSize; // Maximum size of the stack\n    private int[] stackArray; // Array to store stack elements\n    private int top; // Top of the stack\n\n    // Constructor to initialize the stack\n    public Stack(int size) {\n        this.maxSize = size;\n        this.stackArray = new int[maxSize];\n        this.top = -1; // Stack is initially empty\n    }\n\n    // Push method to add element to the stack\n    public void push(int value) {\n        if (isFull()) {\n            System.out.println(\"Stack is full. Cannot push \" + value);\n        } else {\n            stackArray[++top] = value; // Increment top and insert value\n        }\n    }\n\n    // Pop method to remove element from the stack\n    public int pop() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot pop\");\n            return -1; // Return -1 if stack is empty\n        } else {\n            return stackArray[top--]; // Return value and decrement top\n        }\n    }\n\n    // Peek method to get the top element of the stack\n    public int peek() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot peek\");\n            return -1;\n        } else {\n            return stackArray[top]; // Return top element without removing it\n        }\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return (top == maxSize - 1);\n    }\n\n    // Main method to test the stack implementation\n    public static void main(String[] args) {\n        Stack stack = new Stack(5);\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        System.out.println(\"Top element is: \" + stack.peek());\n        System.out.println(\"Popped element is: \" + stack.pop());\n        System.out.println(\"Top element after pop is: \" + stack.peek());\n    }\n}\n",
  "cpp": "#include <iostream>\nusing namespace std;\n\n// Stack implementation using an array\nclass Stack {\nprivate:\n    int maxSize; // Maximum size of the stack\n    int* stackArray; // Array to store stack elements\n    int top; // Top of the stack\n\npublic:\n    // Constructor to initialize the stack\n    Stack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1; // Stack is initially empty\n    }\n\n    // Destructor to clean up the allocated memory\n    ~Stack() {\n        delete[] stackArray;\n    }\n\n    // Push method to add element to the stack\n    void push(int value) {\n        if (isFull()) {\n            cout << \"Stack is full. Cannot push \" << value << endl;\n        } else {\n            stackArray[++top] = value; // Increment top and insert value\n        }\n    }\n\n    // Pop method to remove element from the stack\n    int pop() {\n        if (isEmpty()) {\n            cout << \"Stack is empty. Cannot pop\" << endl;\n            return -1; // Return -1 if stack is empty\n        } else {\n            return stackArray[top--]; // Return value and decrement top\n        }\n    }\n\n    // Peek method to get the top element of the stack\n    int peek() {\n        if (isEmpty()) {\n            cout << \"Stack is empty. Cannot peek\" << endl;\n            return -1;\n        } else {\n            return stackArray[top]; // Return top element without removing it\n        }\n    }\n\n    // Method to check if the stack is empty\n    bool isEmpty() {\n        return (top == -1);\n    }\n\n    // Method to check if the stack is full\n    bool isFull() {\n        return (top == maxSize - 1);\n    }\n};\n\n// Main function to test the stack implementation\nint main() {\n    Stack stack(5);\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    cout << \"Top element is: \" << stack.peek() << endl;\n    cout << \"Popped element is: \" << stack.pop() << endl;\n    cout << \"Top element after pop is: \" << stack.peek() << endl;\n    return 0;\n}\n",
  "javascript": "// Stack implementation using an array\nclass Stack {\n    constructor(size) {\n        this.maxSize = size; // Maximum size of the stack\n        this.stackArray = new Array(this.maxSize); // Array to store stack elements\n        this.top = -1; // Top of the stack\n    }\n\n    // Push method to add element to the stack\n    push(value) {\n        if (this.isFull()) {\n            console.log(`Stack is full. Cannot push ${value}`);\n        } else {\n            this.stackArray[++this.top] = value; // Increment top and insert value\n        }\n    }\n\n    // Pop method to remove element from the stack\n    pop() {\n        if (this.isEmpty()) {\n            console.log(\"Stack is empty. Cannot pop\");\n            return -1; // Return -1 if stack is empty\n        } else {\n            return this.stackArray[this.top--]; // Return value and decrement top\n        }\n    }\n\n    // Peek method to get the top element of the stack\n    peek() {\n        if (this.isEmpty()) {\n            console.log(\"Stack is empty. Cannot peek\");\n            return -1;\n        } else {\n            return this.stackArray[this.top]; // Return top element without removing it\n        }\n    }\n\n    // Method to check if the stack is empty\n    isEmpty() {\n        return this.top === -1;\n    }\n\n    // Method to check if the stack is full\n    isFull() {\n        return this.top === this.maxSize - 1;\n    }\n}\n\n// Testing the stack implementation\nconst stack = new Stack(5);\nstack.push(10);\nstack.push(20);\nstack.push(30);\nconsole.log(\"Top element is: \" + stack.peek());\nconsole.log(\"Popped element is: \" + stack.pop());\nconsole.log(\"Top element after pop is: \" + stack.peek());\n"
}
