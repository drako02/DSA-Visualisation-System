{
  "java": "// Node class represents each element in the linked list\nclass Node {\n    int data;\n    Node next;\n\n    // Constructor to initialize the node\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n// LinkedList class\npublic class LinkedList {\n    Node head;\n\n    // Method to add a new node at the end of the list\n    public void append(int data) {\n        if (head == null) {\n            head = new Node(data);\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = new Node(data);\n    }\n\n    // Method to display the contents of the list\n    public void display() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" \");\n            current = current.next;\n        }\n    }\n\n    // Main method to test the linked list implementation\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n        list.append(1);\n        list.append(2);\n        list.append(3);\n        list.display(); // Output: 1 2 3\n    }\n}\n",
  "cpp": "#include <iostream>\nusing namespace std;\n\n// Node class represents each element in the linked list\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    // Constructor to initialize the node\n    Node(int data) {\n        this->data = data;\n        this->next = nullptr;\n    }\n};\n\n// LinkedList class\nclass LinkedList {\nprivate:\n    Node* head;\n\npublic:\n    // Constructor to initialize the head of the list\n    LinkedList() {\n        head = nullptr;\n    }\n\n    // Method to add a new node at the end of the list\n    void append(int data) {\n        if (head == nullptr) {\n            head = new Node(data);\n            return;\n        }\n        Node* current = head;\n        while (current->next != nullptr) {\n            current = current->next;\n        }\n        current->next = new Node(data);\n    }\n\n    // Method to display the contents of the list\n    void display() {\n        Node* current = head;\n        while (current != nullptr) {\n            cout << current->data << \" \";\n            current = current->next;\n        }\n    }\n};\n\n// Main function to test the linked list implementation\nint main() {\n    LinkedList list;\n    list.append(1);\n    list.append(2);\n    list.append(3);\n    list.display(); // Output: 1 2 3\n    return 0;\n}\n",
  "javascript": "// Node class represents each element in the linked list\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n// LinkedList class\nclass LinkedList {\n    constructor() {\n        this.head = null;\n    }\n\n    // Method to add a new node at the end of the list\n    append(data) {\n        if (this.head === null) {\n            this.head = new Node(data);\n            return;\n        }\n        let current = this.head;\n        while (current.next !== null) {\n            current = current.next;\n        }\n        current.next = new Node(data);\n    }\n\n    // Method to display the contents of the list\n    display() {\n        let current = this.head;\n        while (current !== null) {\n            process.stdout.write(current.data + \" \");\n            current = current.next;\n        }\n    }\n}\n\n// Test the linked list implementation\nconst list = new LinkedList();\nlist.append(1);\nlist.append(2);\nlist.append(3);\nlist.display(); // Output: 1 2 3\n"

}
